// CSS 1 - 1996
// CSS 2 - 1998
// CSS 3 - In development

// pick browser default font
font-family: sans-serif;

// Universal Selector - apply style to all elements
* {
	color: red;
}

// Elements Selector
h1 {
	color: red;
}

// Class Selector
.blog-post {
	color: red;
}

// Id Selector
#main-title {
	color: red;
}

// Attribute Selector
<button disabled>...</button>

[disabled] {
	color: red;
}

	// Combinators

// 1. Adjacent Sibling Combinator (+)
// applies the style to paragraphs that directly follow a h2 tag 
<div>
	<h2>Not applied</h2>
	<p>CSS applied</p>
</div>

h2 + p {
	color: red;
}

// 2. General Sibling Combinator (~)
// applies the style to paragraphs that follow a h2 tag (not necessarly directly, but on the same level)
<div>
	<h2>Not applied</h2>
	<h3>Not applied</h3>
	<p>CSS applied</p>
</div>

h2 + p {
	color: red;
}

// 3. Child Sibling Combinator (>)
// apply the style to all paragraphs that are direct childs of a div tag
<div>
	<p>CSS applied>
	<h2>Not applied</h2>
	<article>
		<p>Not applied>
	</article>
</div>

div > p {
	color: red;
}

// 4. Descendant Combinator
// apply this style to h1 elements nested in an element with id = product-overview
// the h1 does not have to be a direct child for style to apply!
#product-overview h1 {
    color: white;
    font-family: 'Anton', sans-serif;
}

	// Shorthand properties
// Combine values of multiple properties in a single property
	border-width: 2px;
	border-style: dashed;
	border-color: orange;
// might be written as:
	border: 2px dashed orange;
// Order does not matter in this case.

// margin shorthand property
	margin: top right bottom left;
margin: 5px 10px 5px 10px;
	margin: top&bottom left&right;
margin: 5px 10px;
	margin: all_sides;
margin: 5px;

	// Box-sizing model
// By default, box-sizing property has a value of content-box.
// This means that when we specify a width and height for an element, the value is applied to content only, without taking into account padding and border sizes.
// The better approach is to use box-sizing: border-box.
// By doing this, the width and height will be equal to content + padding + border width/height (those values will be included in the computation of width and height).

display: block;
// element will take the whole width of the row, it will be the entire line.
// Ex: <div>, <section>, <article>, <nav>, <h1>, <h2>, <p>.
diplay: inline;
// element will take width as their content needs, it will be a part of a line. For inline elements it is not possible to set top and bottom paddings/margins!
// Additionally, setting a width or height on an inline element also has no effect. The width and height is auto to take as much space as required by the content.
// Ex: <a>, <span>, <img>.
display: inline-block;
// element will take width as their content needs, but now you have the capability to set top and bottom paddings/margins.

width: calc(100% - 55px);

	// Pseudo Classes and Elements
// Pseudo Class -    :class_name (define the style of a special state of an element)
// Pseudo Element - ::element_name (define the style of a specific part of an element)

// !important - overwirtes specifity and all other selectors

	// Positioning
// position: static - is the default value
// With position: static we can't apply positioning using top, bottom etc or specify the z-index.

// postion: fixed - the element is taken out of the document flow, it no longer exists to other elements, so you might have overlapping elements with the fixed one.
// The positioning context of such elements is always the viewport.

// z-index - default value is auto (equal to 0).

// position: absolute - the positioning context depends on the closest ancestor with a positioning attribute.
// If you don't have any ancestors with position applied, then the positioning context is the html element.
// Otherwise, the element will be positioned in relation with the closest ancestor which has such a position property applied.

// position: relative - the positioning context is the element itself

// overflow: hidden - it will hide the element once it's outside of parent

// position: sticky - it's a combination of relative and fixed

	// Images
// Image won't be repeated if one image won't cover the available space
background-repeat: no-repeat;

// Image will take the available container. It ensures no whitespace is in the container.
background-size: cover;

// linear gradient starting as red, ending as blue, diagonally from left bottom to top right
linear-gradient(to top right, red, blue);

// grey filter applied to our image
filter: grayscale(40%);

	// REM font size
// It is useful when you want your font to dinamically grow/shrink depending on user settings of the browser.
// It uses a multiplier to compute the font size applied to an element.
// Ex: font-size: 2rem; - Font size will be 2 x default font size, depending on user settings.

	// Media queries
// Change design depending on viewport size.
// Media queries should be added in ascending order: Ex: @media(min-width: 40rem) first, then @media(min-wdith: 60rem).

// Logical operators can be used too: Ex: @media (min-width: 40rem) and (orientation: landscape).

	// Advanced attribute selectors
// Element with attribute (ex: <input type="text">)
[type] {
	color: red;
}

// Element with specific attribute value (ex: <input type="email">)
[type="email"] {
	color: red;	
}

// Element with specific attribute value in a list (ex: <p lang="en-us en-gb">Hi!</p>)
[lang~="en-us"] {
	color: red;
}

// Element with specific attribute value/value- (ex: <p lang="en-us">Hi!</p>)
[lang|="en"] { // will match "en" or "en-" as a prefix, followed by something. Beware of the dash, it has to immediately follow the prefix!
	color: red;
}

// Element with specific attribute value prefix (ex: <a href="#all">Link</a>)
[href^="#"] {
	color: red;
}

// Element with specific attribute value suffix (ex: <a href="ab.de">Link</a>)
[href$=".de"] {
	color: red;
}

// Element with specific attribute value contains (ex: <img src="i.cdn.com">)
[src*="cdn"] {
	color: red;
}

// Element with specific attribute value contains insensitively (ex: <img src="i.CDN.com">)
[src*="cdn" i] {
	color: red;
}

// Elements that are inputs but not checkboxes
.signup-form input:not([type="checkbox"])

	// Fonts
font-family: 'Anton', sans-serif;
// The syntax above means the browser will try to apply 'Anton' font family, and if not possible sans-serif as a fallback.

@import url('https://fonts.googleapis.com/css?family=Montserrat:400,700');
// This will import the Montserrat font family with the regular/400 and in addition the 700 font-face/font-weight (bold).
// Most of the font families have different font-faces applied. You have to import each of these font-faces if you want to use them (to change the font weight).

// Importing font from local .ttf file
@font-face {
	font-family: 'Anonymous_Pro';
	src: url('Anonymous_Pro/AnonymousPro-Regular.ttf');
}

	// Flexbox
// Turning an element into a 'flex container'.
display: flex;

// The children of this element are called 'flex items'.

// Move the elements to a new row when they won't fit in the flex container while downsizing it (used in conjuction with flex-direction: row).
flex-wrap: wrap;

// Shorthand for flex-direction: row; flex-wrap: wrap;
flex-flow: row wrap;

// align-items - Aligns items across the cross axis.
// Default values is - align-items: stretch;

// justify-content - Aligns items across the main axis.

// Working on individual flex items (those properties apply on individual flex items, not the container!)
// Order: allows us to change the order of flex items by adding numbers. We simply say that the bigger number we apply to the element, the later it will be positioned.
// Default value of order property - order: 0;

// align-self - aligns individual item on the cross axis.

// flex-grow - Used to specify the 'grow' behaviour of an element when the screen gets wider (distribution of white space across multiple elements).
// Ex: elem1 has flex-grow: 1, elem2 has flex-grow: 3 and the screen increases by 400px.
// Therefore elem1 will grow by 100px in width, and elem2 by 300px.
// Default value of this property is flex-grow: 0 (no growth);

// flex-shrink - works in a similar way when the screen gets narrower.
// Default value of this property is flex-shrink: 1 (shrink by a scale factor of 1);

// flex-basis: 350px; - Used to specify size in main-axis direction.
If width is also specified, flex-basis will be picked. Similar for flex-direction: column and height;